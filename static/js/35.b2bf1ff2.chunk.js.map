{"version":3,"file":"static/js/35.b2bf1ff2.chunk.js","mappings":"gOAEaA,EAAcC,EAAAA,KAAaC,MAAM,CAC5CC,MAAOF,EAAAA,KAAaE,MAAM,gCAAgCC,SAAS,qBACnEC,SAAUJ,EAAAA,KAAaK,QAAQ,QAAS,2BAA2BF,SAAS,0B,2DCIxEG,EAAgB,CACpBJ,MAAO,GACPE,SAAU,IAGCG,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CACEH,cAAeA,EACfI,SAPiB,SAACC,GACpBH,GAASI,EAAAA,EAAAA,IAAUD,GACpB,EAMGE,iBAAkBd,EAHpB,SAKG,gBAAGY,EAAH,EAAGA,OAAQG,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,OAAQC,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,MAA1C,OACC,UAAC,IAAD,YACE,SAACC,EAAA,EAAD,CAAaC,MAAM,QAAQC,KAAK,QAAQC,MAAOV,EAAOT,MAAOoB,SAAUR,EAAcS,MAAOR,EAAOb,SACnG,SAACgB,EAAA,EAAD,CAAaC,MAAM,WAAWC,KAAK,WAAWC,MAAOV,EAAOP,SAAUkB,SAAUR,EAAcS,MAAOR,EAAOX,YAC5G,SAACoB,EAAA,EAAD,CAAeJ,KAAK,SAASK,UAAWT,IAAYC,EAAOS,MAAM,QAAQC,MAAM,WAJlF,GASN,E,oBC9BKC,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,8LACE,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,EAAnB,IAEI,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,WAAWC,MAAvB,IACH,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,SAASH,EAArB,IACL,SAAAH,GAAC,OAAIA,EAAEC,MAAMM,OAAOC,MAAMC,KAAzB,IACsB,SAAAT,GAAC,OAAIA,EAAEC,MAAMS,YAAYC,OAAxB,IAClB,SAAAX,GAAC,OAAIA,EAAEC,MAAMK,SAASM,CAArB,IAalB,EATkB,WAChB,OACE,UAACC,EAAA,EAAD,CAAaC,SAAS,6BAA6BC,QAAQ,UAAUC,MAAM,oBAA3E,WACE,SAACxC,EAAD,KACA,SAACqB,EAAD,CAAMoB,GAAG,mBAAT,+BAGL,C","sources":["schemas/loginSchema.js","components/forms/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const loginSchema = Yup.object().shape({\n  email: Yup.string().email('invalid email address format').required('Email is required'),\n  password: Yup.string().matches(/^\\S+$/, 'must not contain spaces').required('Password is required'),\n})","import { useDispatch } from \"react-redux\";\nimport { loginSchema } from \"schemas/loginSchema\";\nimport { loginUser } from \"redux/auth/authOperations\";\nimport { Formik } from \"formik\";\nimport { CustomForm } from \"./common/CustomForm.styled\";\nimport { CustomInput } from \"components/common/CustomInput/CustomInput\";\nimport { ButtonPrimary } from \"components/buttons/ButtonPrimary\";\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const loginHandler = (values) => {\n    dispatch(loginUser(values));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={loginHandler}\n      validationSchema={loginSchema}\n    >\n      {({ values, handleChange, errors, isValid, dirty }) => (\n        <CustomForm>\n          <CustomInput input=\"email\" type=\"email\" value={values.email} onChange={handleChange} error={errors.email} />\n          <CustomInput input=\"password\" type=\"password\" value={values.password} onChange={handleChange} error={errors.password} />\n          <ButtonPrimary type=\"submit\" disabled={!isValid || !dirty} title=\"Login\" width=\"100%\" />\n        </CustomForm>\n      )}\n    </Formik>\n  );\n}","import styled from 'styled-components';\nimport { LoginForm } from 'components/forms/LoginForm';\nimport { AuthWrapper } from 'components/auth/AuthWrapper';\nimport { NavLink } from 'react-router-dom';\n\nconst Link = styled(NavLink)`\n  margin: ${p => p.theme.spaces.xs} 0 0 auto;\n  text-align: end;\n  font-weight: ${p => p.theme.fontWeight.medium};\n  font-size: ${p => p.theme.fontSize.xs};\n  color: ${p => p.theme.colors.brand.green};\n  @media screen and (min-width: ${p => p.theme.breakpoints.desktop}) {\n    font-size: ${p => p.theme.fontSize.s};\n  }\n`;\n\nconst LoginPage = () => {\n  return (\n    <AuthWrapper navTitle=\"Don't you have an account?\" navLink=\"/signup\" navTo=\"Create an account\" >\n      <LoginForm />\n      <Link to=\"/forgot-password\">Forgot password</Link>\n    </AuthWrapper>\n  );\n};\n\nexport default LoginPage;"],"names":["loginSchema","Yup","shape","email","required","password","matches","initialValues","LoginForm","dispatch","useDispatch","onSubmit","values","loginUser","validationSchema","handleChange","errors","isValid","dirty","CustomInput","input","type","value","onChange","error","ButtonPrimary","disabled","title","width","Link","styled","NavLink","p","theme","spaces","xs","fontWeight","medium","fontSize","colors","brand","green","breakpoints","desktop","s","AuthWrapper","navTitle","navLink","navTo","to"],"sourceRoot":""}