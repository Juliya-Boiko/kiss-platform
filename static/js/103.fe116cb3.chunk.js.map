{"version":3,"file":"static/js/103.fe116cb3.chunk.js","mappings":"qPA2CA,UArCuB,WACrB,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAO,mCAAG,+FACTC,EAAAA,EAAAA,MAAeC,MAAK,SAAAC,GAAQ,OAAIV,EAAQU,EAASC,kBAArB,IADnB,2CAAH,sDAGbC,EAAAA,EAAAA,YAAU,WACRL,GACD,GAAE,IAEH,IAIMM,EAAc,mCAAG,WAAOC,GAAP,iEACrBA,EAAEC,iBACEhB,IAASE,GACXI,GAASW,EAAAA,EAAAA,OACTb,EAAS,sBAETc,QAAQC,IAAI,kBACZD,QAAQC,IAAI,oBAAkBnB,IAPX,2CAAH,sDAWpB,OACE,4BACE,8CACA,kBAAOoB,KAAK,OAAOC,MAAOnB,EAAYoB,SAlBrB,SAACP,GACpBZ,EAAcY,EAAEQ,OAAOF,MACxB,KAiBG,mBAAQD,KAAK,SAASI,QAASV,EAA/B,uBAGL,C","sources":["pages/InsertCodePage.jsx"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { getUserAsync } from \"api/auth\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getUserId } from \"redux/authSlice\";\n\nconst InsertCodePage = () => {\n  const [code, setCode] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  \n  const getUser = async () => {\n   await getUserAsync().then(response => setCode(response.verificationToken));\n  } \n  useEffect(() => {\n    getUser();\n  }, []);\n\n  const inputHandler = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const confirmHandler = async (e) => {\n    e.preventDefault();\n    if (code === inputValue) {\n      dispatch(getUserId());\n      navigate('/change-password')\n    } else {\n      console.log('NOT right code');\n      console.log('right code--->', code);\n    }\n  }\n\n  return (\n    <div>\n      <h1>Insert code Form</h1>\n      <input type=\"text\" value={inputValue} onChange={inputHandler} />\n      <button type=\"submit\" onClick={confirmHandler}>Confirm</button>\n    </div>\n  );\n};\n\nexport default InsertCodePage;"],"names":["useState","code","setCode","inputValue","setInputValue","navigate","useNavigate","dispatch","useDispatch","getUser","getUserAsync","then","response","verificationToken","useEffect","confirmHandler","e","preventDefault","getUserId","console","log","type","value","onChange","target","onClick"],"sourceRoot":""}